---
# Create the aggr list variable for the infra SVM
- name: Create the aggregate list variable for infra SVM
  ansible.builtin.set_fact:
    aggr_list: "{{ aggr_list | default([]) + [item.aggr_name] }}"
  with_items:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten | map(attribute='data_aggregates') | flatten }}"
  when: item.aggr_name is defined and item.aggr_name != None
  tags:
    - ontap_config_svm
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship

# See the aggr list
- name: See the aggregate list
  ansible.builtin.debug: var=aggr_list
  tags:
    - ontap_config_svm
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship

# Create the infrastructure SVM with required protocols
- name: Create infrastructure SVM with specified protocols enabled
  netapp.ontap.na_ontap_svm:
    state: present
    name: "{{item.svm_name}}"
      #    root_volume: "{{item.svm_root_vol}}"
      # root_volume_aggregate: "{{aggr_list[1]}}"
      # root_volume_security_style: unix
    allowed_protocols: "{{item.allowed_protocols}}"
    aggr_list: "{{aggr_list}}"
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
    use_rest: always
  with_items:
    - "{{svm_specs}}"
  tags:
    - ontap_config_svm

# Enable NFS protocol with vstorage enabled for VAAI plugin. Adding NFSv4.1 attribute as well
- name: Enable NFS protcol with vstorage
  netapp.ontap.na_ontap_nfs:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    vstorage_state: disabled
    service_state: started
    nfsv41: disabled
    nfsv3: enabled
    udp: enabled
    tcp: enabled
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  when:
    - "('nfs' in svm_specs.allowed_protocols)"
  tags:
    - ontap_config_svm

# Getting total count of data aggregates created
- name: Get the total number of data aggregates created across all nodes in the ONTAP Cluster
  ansible.builtin.set_fact:
    total_aggr_count: "{{ aggr_list|length }}"
  tags:
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship

# See the aggr count
- name: See the aggr count
  ansible.builtin.debug: var=total_aggr_count
  tags:
    - ontap_ls_mirror_volumes
    - ontap_snapmirror_relationship

# Create mirror volumes for the root volume
#- name: Create the load-sharing mirror volumes for the root volume
#  netapp.ontap.na_ontap_volume:
#    state: present
#    vserver: "{{svm_specs.svm_name}}"
#    name: "{{item.1}}"
#    aggregate_name: "{{item.0.aggr_name}}"
#    size: 1
#    type: DP
#    hostname: "{{inventory_hostname}}"
#    username: "{{username}}"
#    password: "{{password}}"
#    https: true
#    validate_certs: false
#  with_together:
#    - "{{ ha_pairs | map(attribute='node_specs') | flatten | map(attribute='data_aggregates') | flatten }}"
#    - "{{ lookup('sequence', 'start=1 end={{ total_aggr_count }} format={{ svm_specs.svm_root_vol }}_m0%1x', wantlist=True) }}"
#  when: item.0.aggr_name is defined and item.0.aggr_name != None
#  tags:
#    - ontap_ls_mirror_volumes

# Create Job schedule for the root volume
#- name: Create a job schedule for the snapmirror of root volume
#  netapp.ontap.na_ontap_job_schedule:
#    state: present
#    name: "{{item.job_name}}"
#    job_minutes: "{{item.job_minutes}}"
#    hostname: "{{inventory_hostname}}"
#    username: "{{username}}"
#    password: "{{password}}"
#    https: true
#    validate_certs: false
#  with_items:
#    - "{{job_schedule}}"
#  tags:
#    - ontap_config_job_schedule

# Create the SnapMirror relationship
#- name: Create the SnapMirror relationships
#  netapp.ontap.na_ontap_command:
#    command: "['snapmirror', 'create', '-source-path', '{{ svm_specs.svm_name }}:{{ svm_specs.svm_root_vol }}', '-destination-path', '{{ svm_specs.svm_name }}:{{ item }}', '-type', 'LS', '-schedule', '{{ job_schedule.0.job_name }}']"
#    hostname: "{{inventory_hostname}}"
#    username: "{{username}}"
#    password: "{{password}}"
#    https: true
#    validate_certs: false
#  with_sequence: start=1 end="{{ total_aggr_count }}" format={{ svm_specs.svm_root_vol }}_m0%1x
#  tags:
#    - ontap_snapmirror_relationship

# Initialize the mirroring relationship
#- name: Initialize the mirroring relationship
#  netapp.ontap.na_ontap_command:
#    command: "['snapmirror', 'initialize-ls-set', '-source-path', '{{ svm_specs.svm_name }}:{{ svm_specs.svm_root_vol }}']"
#    hostname: "{{inventory_hostname}}"
#    username: "{{username}}"
#    password: "{{password}}"
#    https: true
#    validate_certs: false
#  tags:
#    - ontap_snapmirror_relationship

# Create and enable iSCSI service
- name: Create and enable iSCSI service
  netapp.ontap.na_ontap_iscsi:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    service_state: started
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  when: "('iscsi' in svm_specs.allowed_protocols)"
  tags:
    - ontap_enable_iscsi_service

# Create and enable FCP service
- name: Create and enable FCP service
  netapp.ontap.na_ontap_fcp:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    status: up
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  when: "('fcp' in svm_specs.allowed_protocols)"
  tags:
    - ontap_enable_fcp_service

# Create and enable NVMe service
- name: Create and enable NVMe service
  netapp.ontap.na_ontap_nvme:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    status_admin: true
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  when: "('nvme' in svm_specs.allowed_protocols)"
  tags:
    - ontap_enable_nvme_service

# Set the password for vsadmin first. Account cannot be unlocked without password
- name: Set password for vsadmin user
  netapp.ontap.na_ontap_user:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    applications: http,ontapi,ssh
    authentication_method: password
    role_name: vsadmin
    lock_user: yes
    name: vsadmin
    set_password: "{{svm_specs.vsadmin_password}}"
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  tags:
    - ontap_unlock_vsadmin

# Unlock vsadmin user
- name: Unlock vsadmin user
  netapp.ontap.na_ontap_user:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    applications: http,ontapi,ssh
    authentication_method: password
    role_name: vsadmin
    lock_user: no
    name: vsadmin
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  tags:
    - ontap_unlock_vsadmin

# Create login banner for the Storage Virtual Machine
- name: Create login banner for the SVM
  netapp.ontap.na_ontap_login_messages:
    vserver: "{{item.svm_name}}"
    banner: "{{item.svm_login_banner}}"
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_items:
    - "{{svm_specs}}"
  tags:
    - ontap_svm_login_banner

# Remove insecure ciphers from the Storage Virtual Machine. Ciphers with the suffix CBC are considered insecure
- name: Remove insecure ciphers from the SVM
  netapp.ontap.na_ontap_rest_cli:
    command: 'security/ssh/remove'
    verb: 'DELETE'
    params: {'vserver': '{{svm_specs.svm_name}}'}
    body: {'ciphers': ['aes256-cbc','aes192-cbc','aes128-cbc','3des-cbc']}
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  tags:
    - ontap_svm_remove_insecure_ciphers

      
# Create LIFs for NFS access
- name: Create LIF(s) for NFS access
  netapp.ontap.na_ontap_interface:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    service_policy: default-data-files
    home_node: "{{item.0.node_name}}"
    home_port: "{{item.2}}-{{item.1.id}}"
    address: "{{item.0.nfs_lifs.0.address}}"
    netmask: "{{item.0.nfs_lifs.0.netmask}}"
    interface_name: "{{svm_specs.svm_name}}-{{item.0.nfs_lifs.0.name}}"
    admin_status: up
    failover_policy: broadcast-domain-wide
    is_auto_revert: true
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - "{{storage_vlan_list}}"
    - "{{ifgrp_name}}"
  when:
    - "('nfs' in svm_specs.allowed_protocols)"
    - item.1.storage_protocol == "NFS"
  tags:
    - ontap_nfs_lifs

# Getting the iSCSI LIFs list with node names
- name: Get the iSCSI LIFs list with their corresponding home nodes
  ansible.builtin.set_fact:
    iscsi_lifs_list: "{{ iscsi_lifs_list|default([]) + [ {'lif_name': item.1.name, 'address': item.1.address, 'netmask': item.1.netmask, 'lif_fabric': item.1.fabric, 'home_node': item.0.node_name} ] }}"
  with_subelements:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - iscsi_lifs
  when:
    - "('iscsi' in svm_specs.allowed_protocols)"
  tags:
    - ontap_iscsi_lifs

# Getting the iSCSI storage VLANs list
- name: Get the iSCSI storage VLANs list
  ansible.builtin.set_fact:
    iscsi_vlans_list: "{{ iscsi_vlans_list|default([]) + [ {'vlan_id': item.id, 'vlan_fabric': item.fabric} ] }}"
  with_items:
    - "{{storage_vlan_list}}"
  when:
    - "('iscsi' in svm_specs.allowed_protocols)"
    - item.storage_protocol == "iSCSI"
  tags:
    - ontap_iscsi_lifs

# Create iSCSI LIFs on all nodes across the cluster
- name: Create iSCSI LIFs on nodes
  netapp.ontap.na_ontap_interface:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    service_policy: default-data-iscsi
    home_node: "{{item.0.home_node}}"
    home_port: "{{ifgrp_name}}-{{item.1.vlan_id}}"
    address: "{{item.0.address}}"
    netmask: "{{item.0.netmask}}"
    interface_name: "{{item.0.lif_name}}"
    admin_status: up
    failover_policy: disabled
    is_auto_revert: false
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{iscsi_lifs_list}}"
    - "{{iscsi_vlans_list}}"
  when:
    - "('iscsi' in svm_specs.allowed_protocols)"
    - item.0.lif_fabric == item.1.vlan_fabric
  tags:
    - ontap_iscsi_lifs

# Create FCP LIF(s) on Nodes
- name: Create FCP LIF(s) on Nodes
  netapp.ontap.na_ontap_interface:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    protocols: fcp
    home_node: "{{item.0.node_name}}"
    home_port: "{{item.1.home_port}}"
    interface_name: "{{item.1.name}}"
    admin_status: up
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_subelements:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - fcp_lifs
  when: "('fcp' in svm_specs.allowed_protocols)"
  tags:
    - ontap_fcp_lifs

# Create NVMe FC LIF(s) on Nodes
- name: Create NVMe FC LIF(s) on Nodes
  netapp.ontap.na_ontap_interface:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    protocols: fc-nvme
    home_node: "{{item.0.node_name}}"
    home_port: "{{item.1.home_port}}"
    interface_name: "{{item.1.name}}"
    admin_status: up
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_subelements:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - fc-nvme_lifs
  when:
    - "('fcp' in svm_specs.allowed_protocols)"
    - "('nvme' in svm_specs.allowed_protocols)"
  tags:
    - ontap_fc-nvme_lifs

# Getting the NVMe/TCP LIFs list with node names
- name: Get the NVMe/TCP LIFs list with their corresponding home nodes
  ansible.builtin.set_fact:
    nvme_tcp_lifs_list: "{{ nvme_tcp_lifs_list|default([]) + [ {'lif_name': item.1.name, 'address': item.1.address, 'netmask': item.1.netmask, 'lif_fabric': item.1.fabric, 'home_node': item.0.node_name} ] }}"
  with_subelements:
    - "{{ ha_pairs | map(attribute='node_specs') | flatten }}"
    - nvme_tcp_lifs
  when:
    - "('iscsi' in svm_specs.allowed_protocols)"
    - "('nvme' in svm_specs.allowed_protocols)"
  tags:
    - ontap_nvme_tcp_lifs

# Getting the NVMe/TCP storage VLANs list
- name: Get the NVMe/TCP storage VLANs list
  ansible.builtin.set_fact:
    nvme_tcp_vlans_list: "{{ nvme_tcp_vlans_list|default([]) + [ {'vlan_id': item.id, 'vlan_fabric': item.fabric} ] }}"
  with_items:
    - "{{storage_vlan_list}}"
  when:
    - "('iscsi' in svm_specs.allowed_protocols)"
    - "('nvme' in svm_specs.allowed_protocols)"
    - item.storage_protocol == "NVMe"
  tags:
    - ontap_nvme_tcp_lifs

# Create NVMe/TCP LIFs on all nodes across the cluster
- name: Create NVMe/TCP LIFs on nodes
  netapp.ontap.na_ontap_interface:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    service_policy: default-data-nvme-tcp
    home_node: "{{item.0.home_node}}"
    home_port: "{{ifgrp_name}}-{{item.1.vlan_id}}"
    address: "{{item.0.address}}"
    netmask: "{{item.0.netmask}}"
    interface_name: "{{item.0.lif_name}}"
    admin_status: up
    failover_policy: disabled
    is_auto_revert: false
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_nested:
    - "{{nvme_tcp_lifs_list}}"
    - "{{nvme_tcp_vlans_list}}"
  when:
    - "('iscsi' in svm_specs.allowed_protocols)"
    - "('nvme' in svm_specs.allowed_protocols)"
    - item.0.lif_fabric == item.1.vlan_fabric
  tags:
    - ontap_nvme_tcp_lifs

# Create Storage Virtual Machine Management LIF
- name: Create LIF for SVM Management
  netapp.ontap.na_ontap_interface:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    service_policy: default-management
    home_node: "{{svm_specs.svm_mgmt_lif.home_node}}"
    home_port: "{{ifgrp_name}}-{{item.id}}"
    address: "{{svm_specs.svm_mgmt_lif.address}}"
    netmask: "{{svm_specs.svm_mgmt_lif.netmask}}"
    interface_name: "{{svm_specs.svm_name}}-{{svm_specs.svm_mgmt_lif.lif_name}}"
    admin_status: up
    failover_policy: broadcast-domain-wide
    is_auto_revert: true
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_items:
    - "{{ ib_mgmt_vlan_list }}"
  tags:
    - ontap_svm_mgmt_lif

# Create a default route in infra SVM
- name: Create a default route in infra SVM
  netapp.ontap.na_ontap_net_routes:
    state: present
    vserver: "{{svm_specs.svm_name}}"
    destination: "0.0.0.0/0"
    gateway: "{{item.gateway}}"
    hostname: "{{inventory_hostname}}"
    username: "{{username}}"
    password: "{{password}}"
    https: true
    validate_certs: false
  with_items:
    - "{{svm_specs.svm_mgmt_lif}}"
  tags:
    - ontap_svm_default_route
